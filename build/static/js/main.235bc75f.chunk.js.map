{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","address","setAddress","encryptedData","setEncryptedData","decryptedData","setDecryptedData","inputValue","setInputValue","className","onClick","window","ethereum","enable","Eth","accounts","type","value","onChange","evt","target","request","method","params","publicKey","ethEncrypt","data","cipher","Buffer","from","JSON","stringify","toString","result","existing","map","item","cypher","hexCypher"],"mappings":"2SAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,wGCgDeY,IA3Df,WAAgB,IAAD,EACiBG,mBAAS,MAD1B,mBACNC,EADM,KACGC,EADH,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAIuBN,mBAAS,IAJhC,mBAINO,EAJM,KAIMC,EAJN,KAgCb,OACE,sBAAKC,UAAU,MAAf,WACIR,GAAW,wBAAQS,QA5BH,WAChBC,OAAOC,WACTD,OAAOC,SAASC,SACJ,IAAIC,IAAIH,OAAOC,UACvBG,WAAW3B,MAAK,SAAA2B,GAAQ,OAAIb,EAAWa,EAAS,SAwBvC,iCAEZd,GACC,gCACE,0CAAaA,KACb,uBAEA,0CACA,uBAAOe,KAAK,OAAOC,MAAOV,EAAYW,SAAU,SAAAC,GAAG,OAAIX,EAAcW,EAAIC,OAAOH,UAChF,wBAAQP,QApBI,kBAClBC,OAAOC,SAASS,QAAQ,CAAEC,OAAQ,6BAA8BC,OAAQ,CAACtB,KACtEb,MAAK,SAAAoC,GAAS,OAAIC,kBAAWD,EAAW,CAAEE,KAAMnB,GAAc,+BAC9DnB,MAAK,SAAAuC,GAAM,kBAASC,EAAOC,KAAKC,KAAKC,UAAUJ,GAAS,QAAQK,SAAS,WACzE5C,MAAK,SAAA6C,GACJ7B,GAAiB,SAAA8B,GAAQ,4BAAQA,GAAR,CAAkBD,OAC3CzB,EAAc,QAcZ,4BACA,6BACGL,EAAcgC,KAAI,SAAAC,GAAI,OAAI,6BAAKA,SAGlC,0CACA,wBAAQ1B,QA/BG,WACjBJ,EAAiB,IACjBH,EAAcgC,KAAI,SAAAE,GAAM,OANLC,EAMqBD,EALxC1B,OAAOC,SAASS,QAAQ,CAAEC,OAAQ,cAAeC,OAAQ,CAACe,EAAWrC,KAClEb,MAAK,SAAA6C,GAAM,OAAI3B,GAAiB,SAAA4B,GAAQ,4BAAQA,GAAR,CAAkBD,UAF3C,IAACK,MAmCb,yBACA,6BACGjC,EAAc8B,KAAI,SAAAC,GAAI,OAAI,6BAAKA,kB","file":"static/js/main.235bc75f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState } from 'react'\nimport { encrypt as ethEncrypt } from 'eth-sig-util'\nimport Eth from 'ethjs-query'\n\nfunction App() {\n  const [address, setAddress] = useState(null)\n  const [encryptedData, setEncryptedData] = useState([])\n  const [decryptedData, setDecryptedData] = useState([])\n  const [inputValue, setInputValue] = useState('')\n\n  const handleConnect = () => {\n    if (window.ethereum) {\n      window.ethereum.enable();\n      const eth = new Eth(window.ethereum);\n      eth.accounts().then(accounts => setAddress(accounts[0]))\n    }  \n  }\n\n  const decryptData = (hexCypher) =>\n    window.ethereum.request({ method: 'eth_decrypt', params: [hexCypher, address] })\n      .then(result => setDecryptedData(existing => [...existing, result]))\n\n  const decryptAll = () => {\n    setDecryptedData([])\n    encryptedData.map(cypher => decryptData(cypher))\n  }\n\n  const encryptData = () =>\n    window.ethereum.request({ method: 'eth_getEncryptionPublicKey', params: [address] })\n      .then(publicKey => ethEncrypt(publicKey, { data: inputValue }, 'x25519-xsalsa20-poly1305'))\n      .then(cipher => `0x${Buffer.from(JSON.stringify(cipher), 'utf8').toString('hex')}`)\n      .then(result => {\n        setEncryptedData(existing => [...existing, result])\n        setInputValue('')\n      })\n\n  return (\n    <div className=\"App\">\n      {!address && <button onClick={handleConnect}>Connect to Metamask</button>}\n\n      {address && (\n        <div>\n          <p>Address: {address}</p>\n          <hr/>\n\n          <h2>Encrypt:</h2>\n          <input type=\"text\" value={inputValue} onChange={evt => setInputValue(evt.target.value)} />\n          <button onClick={encryptData}>Encrypt String</button>\n          <ol>\n            {encryptedData.map(item => <li>{item}</li>)}\n          </ol>\n\n          <h2>Decrypt:</h2>\n          <button onClick={decryptAll}>Decrypt All</button>\n          <ol>\n            {decryptedData.map(item => <li>{item}</li>)}\n          </ol>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}